// msc.h
// Generado por Mojon Script Compiler de MTE MK1 v4
// Copyleft 2011 The Mojon Twins
 
// Script data & pointers
extern unsigned char mscce_0 [];
extern unsigned char mscce_1 [];
extern unsigned char mscce_2 [];
extern unsigned char mscce_3 [];
extern unsigned char mscce_4 [];
extern unsigned char mscce_5 [];
extern unsigned char mscce_6 [];
extern unsigned char mscce_7 [];
extern unsigned char mscce_8 [];
extern unsigned char mscce_9 [];
extern unsigned char mscce_10 [];
extern unsigned char mscce_11 [];
extern unsigned char mscce_12 [];
extern unsigned char msccf_0 [];
extern unsigned char msccf_1 [];
extern unsigned char msccf_2 [];
extern unsigned char msccf_3 [];
extern unsigned char msccf_4 [];
extern unsigned char msccf_5 [];
extern unsigned char msccf_6 [];
extern unsigned char msccf_7 [];
extern unsigned char msccf_8 [];
extern unsigned char msccf_9 [];
 
unsigned char *e_scripts [] = {
    0, 0, 0, 0, 0, mscce_2, 0, 0, 0, mscce_3, 0, 0, mscce_4, 0, mscce_6, mscce_5, 0, 0, mscce_11, mscce_12, mscce_8, mscce_7, mscce_9, mscce_10, mscce_0, mscce_1
};
 
unsigned char *f_scripts [] = {
    0, 0, 0, 0, 0, msccf_1, 0, 0, 0, 0, 0, 0, 0, 0, msccf_3, msccf_2, 0, 0, msccf_8, msccf_9, msccf_5, msccf_4, msccf_6, msccf_7, 0, msccf_0, 0
};
 
#asm
._mscce_0
    defb 0x06, 0xF0, 0xFF, 0xB3, 0x62, 0x65, 0xFF, 0xFF
._mscce_1
    defb 0x05, 0x10, 0x02, 0x04, 0xFF, 0xFF, 0xFF
._mscce_2
    defb 0x12, 0xF0, 0xFF, 0x20, 0x0C, 0x07, 0x17, 0x20, 0x0D, 0x06, 0x18, 0xA6, 0xA7, 0x51, 0xB4, 0x54, 0xDF, 0x7F, 0xFF, 0xFF
._mscce_3
    defb 0x2C, 0xF0, 0xFF, 0x20, 0x07, 0x02, 0x19, 0x20, 0x07, 0x03, 0x1A, 0xE3, 0x1E, 0x20, 0x20, 0x55, 0x4E, 0x41, 0x20, 0x45, 0x4E, 0x54, 0x52, 0x41, 0x44, 0x41, 0x20, 0x41, 0x4C, 0x20, 0x53, 0x55, 0x42, 0x54, 0x45, 0x52, 0x52, 0x41, 0x4E, 0x45, 0x4F, 0x20, 0x20, 0x00, 0xFF, 0xFF
._mscce_4
    defb 0x34, 0xF0, 0xFF, 0x20, 0x04, 0x06, 0x1B, 0x20, 0x04, 0x07, 0x1C, 0x20, 0x07, 0x06, 0x19, 0x20, 0x07, 0x07, 0x1A, 0xE3, 0x1E, 0x20, 0x20, 0x55, 0x4E, 0x41, 0x20, 0x45, 0x4E, 0x54, 0x52, 0x41, 0x44, 0x41, 0x20, 0x41, 0x4C, 0x20, 0x53, 0x55, 0x42, 0x54, 0x45, 0x52, 0x52, 0x41, 0x4E, 0x45, 0x4F, 0x20, 0x20, 0x00, 0xFF, 0xFF
._mscce_5
    defb 0x32, 0xF0, 0xFF, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x4D, 0x41, 0x43, 0x41, 0x52, 0x49, 0x41, 0x20, 0x4C, 0x41, 0x20, 0x45, 0x53, 0x54, 0x52, 0x41, 0x46, 0x41, 0x4C, 0x41, 0x52, 0x49, 0x41, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x02, 0x07, 0x15, 0x20, 0x03, 0x07, 0x1D, 0x51, 0x18, 0x64, 0x4C, 0x7F, 0xA6, 0xFF, 0x07, 0xA8, 0xFF, 0x20, 0x00, 0x03, 0x1F, 0xFF, 0x07, 0xB8, 0xFF, 0x20, 0x03, 0x07, 0x1E, 0xFF, 0xFF
._mscce_6
    defb 0x2F, 0xA9, 0xFF, 0x61, 0xA6, 0x20, 0x02, 0x02, 0x12, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x55, 0x4E, 0x41, 0x20, 0x53, 0x45, 0x54, 0x41, 0x20, 0x43, 0x4F, 0x4E, 0x20, 0x54, 0x45, 0x54, 0x41, 0x53, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x51, 0x20, 0x20, 0x2F, 0x2F, 0xFF, 0xFF
._mscce_7
    defb 0x32, 0xF0, 0xFF, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4C, 0x42, 0x45, 0x52, 0x54, 0x4F, 0x20, 0x45, 0x4C, 0x20, 0x54, 0x55, 0x45, 0x52, 0x54, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x03, 0x02, 0x13, 0x20, 0x04, 0x02, 0x1D, 0x51, 0x30, 0x10, 0x59, 0x2F, 0xA6, 0xFF, 0x07, 0xAA, 0xFF, 0x20, 0x00, 0x07, 0x1F, 0xFF, 0x07, 0xBA, 0xFF, 0x20, 0x04, 0x02, 0x1E, 0xFF, 0xFF
._mscce_8
    defb 0x2F, 0xAB, 0xFF, 0x61, 0xA6, 0x20, 0x06, 0x04, 0x12, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x55, 0x4E, 0x41, 0x20, 0x53, 0x45, 0x54, 0x41, 0x20, 0x43, 0x4F, 0x4E, 0x20, 0x54, 0x45, 0x54, 0x41, 0x53, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x51, 0x60, 0x40, 0x6F, 0x4F, 0xFF, 0xFF
._mscce_9
    defb 0x32, 0xF0, 0xFF, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x4F, 0x4E, 0x4F, 0x53, 0x4F, 0x20, 0x45, 0x4C, 0x20, 0x53, 0x45, 0x42, 0x4F, 0x53, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x0C, 0x02, 0x1D, 0x20, 0x0D, 0x02, 0x14, 0x51, 0xB6, 0x10, 0xDF, 0x2F, 0xA6, 0xFF, 0x07, 0xAC, 0xFF, 0x20, 0x0E, 0x07, 0x1F, 0xFF, 0x07, 0xBC, 0xFF, 0x20, 0x0C, 0x02, 0x1E, 0xFF, 0xFF
._mscce_10
    defb 0x2F, 0xAD, 0xFF, 0x61, 0xA6, 0x20, 0x0D, 0x08, 0x12, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x55, 0x4E, 0x41, 0x20, 0x53, 0x45, 0x54, 0x41, 0x20, 0x43, 0x4F, 0x4E, 0x20, 0x54, 0x45, 0x54, 0x41, 0x53, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x51, 0xD0, 0x80, 0xDF, 0x8F, 0xFF, 0xFF
._mscce_11
    defb 0x32, 0xF0, 0xFF, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x49, 0x54, 0x4F, 0x52, 0x20, 0x45, 0x4C, 0x20, 0x4C, 0x45, 0x4E, 0x41, 0x44, 0x4F, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x0C, 0x08, 0x1D, 0x20, 0x0D, 0x08, 0x16, 0x51, 0xB6, 0x80, 0xDF, 0x8F, 0xA6, 0xFF, 0x07, 0xAE, 0xFF, 0x20, 0x0E, 0x03, 0x1F, 0xFF, 0x07, 0xBE, 0xFF, 0x20, 0x0C, 0x08, 0x1E, 0xFF, 0xFF
._mscce_12
    defb 0x2F, 0xAF, 0xFF, 0x61, 0xA6, 0x20, 0x0D, 0x08, 0x12, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x55, 0x4E, 0x41, 0x20, 0x53, 0x45, 0x54, 0x41, 0x20, 0x43, 0x4F, 0x4E, 0x20, 0x54, 0x45, 0x54, 0x41, 0x53, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x51, 0xD0, 0x80, 0xDF, 0x8F, 0xFF, 0xFF
._msccf_0
    defb 0x05, 0xF0, 0xFF, 0x30, 0x01, 0xFF, 0x2B, 0x10, 0x01, 0x14, 0xFF, 0xE0, 0x08, 0x65, 0x61, 0x6E, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, 0x52, 0x41, 0x4D, 0x50, 0x41, 0x20, 0x44, 0x45, 0x53, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x44, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xFF, 0xFF
._msccf_1
    defb 0x0B, 0x21, 0xC0, 0xDF, 0x22, 0x60, 0x7F, 0x41, 0x0E, 0xFF, 0xF1, 0xFF, 0x2B, 0x20, 0x0C, 0x07, 0xA6, 0xFF, 0xE3, 0x1E, 0x20, 0x20, 0x53, 0x45, 0x54, 0x41, 0x53, 0x21, 0x20, 0x53, 0x45, 0x54, 0x41, 0x53, 0x20, 0x43, 0x4F, 0x4E, 0x20, 0x54, 0x45, 0x54, 0x41, 0x53, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x00, 0xE1, 0xE0, 0x07, 0xB6, 0xFF, 0x2B, 0x20, 0x0D, 0x06, 0xA7, 0xFF, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x48, 0x4F, 0x4C, 0x41, 0x20, 0x50, 0x49, 0x52, 0x41, 0x54, 0x41, 0x2E, 0x2E, 0x2E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE1, 0xE0, 0x0B, 0xB7, 0xFF, 0xFF
._msccf_2
    defb 0x32, 0x20, 0x03, 0x07, 0xA8, 0xFF, 0xB8, 0x20, 0x03, 0x07, 0x1E, 0x20, 0x00, 0x03, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x52, 0x49, 0x50, 0x54, 0x41, 0x20, 0x41, 0x42, 0x49, 0x45, 0x52, 0x54, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE0, 0x08, 0xFF, 0x2B, 0x20, 0x02, 0x07, 0xA6, 0xFF, 0xB6, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x41, 0x4C, 0x45, 0x20, 0x46, 0x52, 0x41, 0x4E, 0x21, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE1, 0xE0, 0x0B, 0xFF, 0xFF
._msccf_3
    defb 0x3E, 0xA9, 0xA6, 0x20, 0x02, 0x02, 0xFF, 0xA1, 0xB6, 0xB9, 0x10, 0x02, 0x01, 0x40, 0x01, 0x60, 0x64, 0x6E, 0x20, 0x0E, 0x03, 0x10, 0x20, 0x02, 0x02, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x54, 0x52, 0x41, 0x50, 0x41, 0x44, 0x4F, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
._msccf_4
    defb 0x32, 0x20, 0x04, 0x02, 0xAA, 0xFF, 0xBA, 0x20, 0x04, 0x02, 0x1E, 0x20, 0x00, 0x07, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x52, 0x49, 0x50, 0x54, 0x41, 0x20, 0x41, 0x42, 0x49, 0x45, 0x52, 0x54, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE0, 0x08, 0xFF, 0x2B, 0x20, 0x03, 0x02, 0xA6, 0xFF, 0xB6, 0xE3, 0x1E, 0x45, 0x53, 0x54, 0x41, 0x53, 0x20, 0x4C, 0x45, 0x4A, 0x4F, 0x53, 0x20, 0x4F, 0x20, 0x45, 0x52, 0x45, 0x53, 0x20, 0x4D, 0x55, 0x59, 0x20, 0x43, 0x48, 0x49, 0x43, 0x4F, 0x3F, 0x20, 0x00, 0xE1, 0xE0, 0x07, 0xFF, 0xFF
._msccf_5
    defb 0x3E, 0xAB, 0xA6, 0x20, 0x06, 0x04, 0xFF, 0xA1, 0xB6, 0xBB, 0x10, 0x02, 0x01, 0x40, 0x01, 0x60, 0x64, 0x6E, 0x20, 0x0E, 0x07, 0x10, 0x20, 0x06, 0x04, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x54, 0x52, 0x41, 0x50, 0x41, 0x44, 0x4F, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
._msccf_6
    defb 0x32, 0x20, 0x0C, 0x02, 0xAC, 0xFF, 0xBC, 0x20, 0x0C, 0x02, 0x1E, 0x20, 0x0E, 0x07, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x52, 0x49, 0x50, 0x54, 0x41, 0x20, 0x41, 0x42, 0x49, 0x45, 0x52, 0x54, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE0, 0x08, 0xFF, 0x2B, 0x20, 0x0D, 0x02, 0xA6, 0xFF, 0xB6, 0xE3, 0x1E, 0x4D, 0x45, 0x20, 0x43, 0x4F, 0x4D, 0x45, 0x52, 0x49, 0x41, 0x20, 0x55, 0x4E, 0x20, 0x48, 0x45, 0x4C, 0x41, 0x4F, 0x20, 0x45, 0x4E, 0x20, 0x4D, 0x41, 0x4E, 0x54, 0x45, 0x43, 0x41, 0x00, 0xE1, 0xE0, 0x07, 0xFF, 0xFF
._msccf_7
    defb 0x3E, 0xAD, 0xA6, 0x20, 0x0D, 0x08, 0xFF, 0xA1, 0xB6, 0xBD, 0x10, 0x02, 0x01, 0x40, 0x01, 0x60, 0x64, 0x6E, 0x20, 0x00, 0x07, 0x10, 0x20, 0x0D, 0x08, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x54, 0x52, 0x41, 0x50, 0x41, 0x44, 0x4F, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
._msccf_8
    defb 0x32, 0x20, 0x0C, 0x08, 0xAE, 0xFF, 0xBE, 0x20, 0x0C, 0x08, 0x1E, 0x20, 0x0E, 0x03, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x52, 0x49, 0x50, 0x54, 0x41, 0x20, 0x41, 0x42, 0x49, 0x45, 0x52, 0x54, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE0, 0x08, 0xFF, 0x2B, 0x20, 0x0D, 0x08, 0xA6, 0xFF, 0xB6, 0xE3, 0x1E, 0x20, 0x56, 0x4F, 0x59, 0x20, 0x44, 0x45, 0x20, 0x43, 0x4F, 0x4D, 0x50, 0x52, 0x41, 0x53, 0x20, 0x4C, 0x4F, 0x53, 0x20, 0x4D, 0x49, 0x45, 0x52, 0x43, 0x4F, 0x4C, 0x45, 0x53, 0x20, 0x00, 0xE1, 0xE0, 0x07, 0xFF, 0xFF
._msccf_9
    defb 0x3E, 0xAF, 0xA6, 0x20, 0x0D, 0x08, 0xFF, 0xA1, 0xB6, 0xBF, 0x10, 0x02, 0x01, 0x40, 0x01, 0x60, 0x64, 0x6E, 0x20, 0x00, 0x03, 0x10, 0x20, 0x0D, 0x08, 0x00, 0xE3, 0x1E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x54, 0x52, 0x41, 0x50, 0x41, 0x44, 0x4F, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
#endasm
 
unsigned char *script;
unsigned char *next_script;
unsigned char sc_i, sc_m, sc_x, sc_y, sc_c, sc_n, sc_terminado, sc_continuar;
 
void msc_init_all (void) {
    #asm
            ld  hl, _flags
            ld  de, _flags+1
            ld  bc, MAX_FLAGS-1
            xor a
            ld  (hl), a
            ldir
    #endasm
}
 
unsigned char read_byte (void) {
    #asm
            ld  hl, (_script)
            ld  a, (hl)
            inc hl
            ld  (_script), hl
            ld  l, a
            ld  h, 0
            and 0xF0
            ld  (_sc_i), a
            ld  a, l
            and 0x0f
            ld  (_sc_m), a
   #endasm
}
 
unsigned char read_vbyte (void) {
    #asm
            call _read_byte
            ;ld  a, l
            bit 7, a
            ret z
            and 127
            ld  d, 0
            ld  e, a
            ld  hl, _flags
            add hl, de
            ld  l, (hl)
            ld  h, 0
    #endasm
}
void read_x_y (void) {
    #asm
            call _read_vbyte
            ld  a, l
            ld  (_sc_x), a
            call _read_vbyte
            ld  a, l
            ld  (_sc_y), a
    #endasm
}
 
// Ejecutamos el script apuntado por *script:
void run_script (void) {
    script_result = 0;
 
    if (script == 0)
        return; 
 
    script_something_done = 0;
 
    while (0 == script_result) {
        sc_c = read_byte ();
        if (sc_c == 0xFF) break;
        next_script = script + sc_c;
        sc_terminado = sc_continuar = 0;
        while (0 == sc_terminado) {
            sc_c = read_byte ();
            if (sc_i == 0xa0) { sc_terminado = flags [sc_m]; }
            else if (sc_i == 0xb0) { sc_terminado = (! flags [sc_m]); }
            else switch (sc_c) {
                case 0x10:
                    // IF FLAG x = n
                    // Opcode: 10 x n
                    sc_terminado = (flags [read_vbyte ()] != read_vbyte ());
                    break;
                case 0x20:
                    // IF PLAYER_TOUCHES x, y
                    // Opcode: 20 x y
                    read_x_y ();
                    sc_terminado = (! ((player.x >> 6) >= (sc_x << 4) - 15 && (player.x >> 6) <= (sc_x << 4) + 15 && (player.y >> 6) >= (sc_y << 4) - 15 && (player.y >> 6) <= (sc_y << 4) + 15));
                    break;
                case 0x21:
                    // IF PLAYER_IN_X x1, x2
                    // Opcode: 21 x1 x2
                    sc_x = read_byte ();
                    sc_y = read_byte ();
                    sc_terminado = (! ((player.x >> 6) >= sc_x && (player.x >> 6) <= sc_y));
                    break;
                case 0x22:
                    // IF PLAYER_IN_Y y1, y2
                    // Opcode: 22 y1 y2
                    sc_x = read_byte ();
                    sc_y = read_byte ();
                    sc_terminado = (! ((player.y >> 6) >= sc_x && (player.y >> 6) <= sc_y));
                    break;
                case 0x41:
                     // IF OBJECT_COUNT = n
                     // Opcode: 41 n
                     sc_terminado = (player.objs != read_vbyte ());
                     break;
                case 0xF0:
                     // IF TRUE
                     // Opcode: F0
                     break;
                case 0xFF:
                    // THEN
                    // Opcode: FF
                    #asm
                        ld  a, 1
                        ld  (_sc_terminado), a
                        ld  (_sc_continuar), a
                        ld  (_script_something_done), a
                    #endasm
                    break;
            }
        }
        if (sc_continuar) {
            sc_terminado = 0;
            while (0 == sc_terminado) {
                sc_c = read_byte ();
                if (sc_i == 0xa0) { flags [sc_m & 0x0f] = 0; }
                else if (sc_i == 0xb0) { flags [sc_m & 0x0f] = 1; }
                else switch (sc_c) {
                    case 0x10:
                        // INC FLAG x, n
                        // Opcode: 10 x n
                        flags [read_vbyte ()] += read_vbyte ();
                        break;
                    case 0x20:
                        // SET TILE (x, y) = n
                        // Opcode: 20 x y n
                        set_map_tile (read_vbyte (), read_vbyte (), sc_n = read_vbyte (), comportamiento_tiles [sc_n]);
                        break;
                    case 0x30:
                        // INC LIFE n
                        // Opcode: 30 n
                        player.life += read_vbyte ();
                        break;
                    case 0x40:
                        // INC OBJECTS n
                        // Opcode: 40 n
                        player.objs += read_vbyte ();
                        break;
                    case 0x51:
                        // SET_FIRE_ZONE x1, y1, x2, y2
                        // Opcode: 51 x1 y1 x2 y2
                        fzx1 = read_byte ();
                        fzy1 = read_byte ();
                        fzx2 = read_byte ();
                        fzy2 = read_byte ();
                        f_zone_ac = 1;
                        break;
                    case 0x60:
                        // SHOW_COINS
                        // Opcode: 60
                        scenery_info.show_coins = 1;
                        break;
                    case 0x61:
                        // HIDE_COINS
                        // Opcode: 61
                        scenery_info.show_coins = 0;
                        break;
                    case 0x62:
                        // ENABLE_KILL_SLOWLY
                        // Opcode: 62
                        scenery_info.evil_kills_slowly = 1;
                        break;
                    case 0x64:
                        // ENABLE_TYPE_6
                        // Opcode: 64
                        scenery_info.allow_type_6 = 1;
                        break;
                    case 0x65:
                        // DISABLE_TYPE_6
                        // Opcode: 65
                        scenery_info.allow_type_6 = 0;
                        break;
                    case 0x6E:
                        // REDRAW
                        // Opcode: 6E
                        draw_scr_background ();
                        break;
                    case 0xE0:
                        // SOUND n
                        // Opcode: E0 n
                        play_sfx (read_vbyte ());
                        break;
                    case 0xE1:
                        // SHOW
                        // Opcode: E1
                        sp_UpdateNow ();
                        break;
                    case 0xE3:
                        sc_n = read_byte ();
                        draw_text (LINE_OF_TEXT_X, LINE_OF_TEXT, LINE_OF_TEXT_ATTR, script);
                        script += sc_n;
                        break;
                    case 0xF1:
                        #asm
                            ld  a, 1
                            ld  (_sc_terminado), a
                            ld  (_script_result), a
                        #endasm
                        break;
                    case 0xFF:
                        sc_terminado = 1;
                        break;
                }
            }
        }
        script = next_script;
    }
}
